import keras
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D
from keras.optimizers import Adam
from keras.layers.pooling import MaxPooling2D
from keras.callbacks import ModelCheckpoint, EarlyStopping

def cnn_model(num_classes, input_shape=(256,256,3), verbose=False):
  model = Sequential()

  model.add(Conv2D(32, kernel_size=(3, 3), activation="relu",
                  input_shape=input_shape))
  model.add(Conv2D(64, kernel_size=(3, 3), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Dropout(0.25))

  model.add(Conv2D(128, kernel_size=(3, 3), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Conv2D(128, kernel_size=(3, 3), activation="relu"))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Dropout(0.25))

  model.add(Flatten())
  model.add(Dense(1024, activation="relu"))
  model.add(Dropout(0.5))
  model.add(Dense(num_classes, activation="softmax"))


  # initiate Adam optimizer
  opt = Adam(lr=0.0001, decay=1e-6)

  # Let's train the model using RMSprop
  model.compile(loss="categorical_crossentropy",
                optimizer=opt, metrics=["accuracy"])
  if(verbose):
    model.summary()

  return model

def setup_data_aug():
  print("Using real-time data augmentation.\n")
  # This will do preprocessing and realtime data augmentation:
  from keras.preprocessing.image import ImageDataGenerator

  datagen = ImageDataGenerator(
  	featurewise_center=False, # set input mean to 0 over the dataset
	  samplewise_center=False,  # set each sample mean to 0
  	featurewise_std_normalization=False, # divide inputs by std of the dataset
	  samplewise_std_normalization=False,  # divide each input by its std
  	zca_whitening=False, # apply ZCA whitening
	  rotation_range=0, # randomly rotate images in the range
                      # (degrees, 0 to 180)
  	width_shift_range=0.1, # randomly shift images horizontally
                           # (fraction of total width)
  	height_shift_range=0.1, # randomly shift images vertically
                            # (fraction of total height)
  	horizontal_flip=True, # randomly flip images
	  vertical_flip=False   # randomly flip images
  )

  return datagen

def cnn_train(best_weights_file_path, model, x_train, y_train, x_valid, y_valid, batch_size, epochs):

  datagen = setup_data_aug()
  checkpoint = ModelCheckpoint(best_weights_file_path, verbose=1,
                              monitor='val_accuracy',
                              save_best_only=True,
                              mode='max')
  #lr_reducer = ReduceLROnPlateau(verbose=1)
  callbacks = [checkpoint]

  # early stop callback, given a bit more leeway
  stahp = EarlyStopping(min_delta=0.00001, patience=25)

  # Fit the model on the batches generated by datagen.flow().
  history = model.fit_generator(datagen.flow(x_train, y_train,
      batch_size=batch_size,shuffle=True),
      steps_per_epoch=x_train.shape[0] // batch_size,
      epochs=epochs,verbose=2,
      validation_data=(x_valid, y_valid),
      #workers=4, callbacks=[checkpoint,stahp])
      callbacks=callbacks)

  return model, history

def plot_acc_loss(history):
  # list all data in history
  print(history.history.keys())
  # summarize history for accuracy
  plt.plot(history.history['accuracy'])
  plt.plot(history.history['val_accuracy'])
  plt.title('model accuracy')
  plt.ylabel('accuracy')
  plt.xlabel('epoch')
  plt.legend(['train', 'test'], loc='upper left')
  plt.show()
  # summarize history for loss
  plt.plot(history.history['loss'])
  plt.plot(history.history['val_loss'])
  plt.title('model loss')
  plt.ylabel('loss')
  plt.xlabel('epoch')
  plt.legend(['train', 'test'], loc='upper left')
  plt.show()  
